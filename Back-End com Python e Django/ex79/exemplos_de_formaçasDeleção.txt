CASCADE
Ao atribuir o on_delete como CASCADE, ao deletar a nossa model todos os seus relacionamentos que dependem da model para existir serão excluídos por consequência.

from my_models.models import Pai, Filho

pai = Pai.objects.create(name="Roger")
filho = Filho.objects.create(name="Sandra", pai=pai)

# será apagado tanto o pai quanto o filho, 
# pois o filho depende de uma model pai para existir.
pai.delete()
# (2, {'artist.Filho': 1, 'artist.Pai': 1})

--------------------------------------------------------------------------------------

PROTECT
Temos também o atributo PROTECT, é muito usado quando não queremos que uma model que possua relacionamentos seja excluída, caso tente fazer a deleção de uma model com que possua um desses relacionamentos será levantado o erro ProtectedError.

# shell do Django
from my_models.models import Pai, Filho

pai = Pai.objects.create(name="Roger")
filho = Filho.objects.create(name="Sandra", pai=pai)

pai.delete()
# Será levantado o erro ProtectedError

filho.delete()
# (1, {'artist.Filho': 1})
# Somente deletando o filho antes, conseguimos deletar o pai
pai.delete()
# (1, {'artist.Pai': 1})

-------------------------------------------------------------------------------------

RESTRICT
Por meio do RESTRICT vamos impedir que uma model que possua relacionamento com outra com o atributo RESTRICT mesmo que indiretamente, sendo necessário fazer a deleção em forma sequencial do nível mais interno do relacionamento ao nível mais externo.
Ao tentar deletar o pai (pai.delete()), como os filhos e netos associados a ele poderiam existir? Esse comportamento é exatamente o que o RESTRICT protege. Para fazer a deleção precisamos deletar sequencialmente os registros que se dependem, pois uma model depende estritamente da outra:

from my_models.models import Pai, Filho, Neto

pai = Pai.objects.create(name="Roger")
filho = Filho.objects.create(name="Sandra", pai=pai)
neto = Neto.objects.create(name="Ronaldo", filho=filho)

pai.delete()
# RestrictedError

filho.delete()
# RestrictedError

neto.delete()
# (1, {'artist.Neto': 1})

filho.delete()
# (1, {'artist.Filho': 1})

pai.delete()
# (1, {'artist.Pai': 1})

----------------------------------------------------------------------------

SET NULL
Com o atributo SET_NULL ao deletar um relacionamento o campo de relacionamento será preenchido com o valor de null (sintaxe de SQL), para que essa configuração funcione também é necessário adicionar o argumento null=True para que o nosso campo possa aceitar valores nulos:

 on_delete=models.SET_NULL, related_name="filhos", null=True

 # shell do Django
from my_models.models import Pai, Filho

pai = Pai.objects.create(name="Roger")
filho = Filho.objects.create(name="Sandra", pai=pai)

filho.pai
# <Pai: Pai object (1)>

pai.delete()
# (1, {'artist.Pai': 1})

filho.pai
# Como pai foi deletado, seu id sumiu
# <Pai: Pai object (None)>

# Podemo 'atualizar' filho com os dados mais recentes
filho = Filho.objects.get(id=1)
print(filho.pai)
# None (ou vazio)