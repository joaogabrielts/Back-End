ðŸ“· Imagem 1 - InserÃ§Ã£o de dados invÃ¡lidos

account_dict = {
    "email": "angela.com",
    "age": True,
    "sex": "feminino"
}
DicionÃ¡rio com dados invÃ¡lidos:

email mal formatado

age nÃ£o Ã© um nÃºmero inteiro

name estÃ¡ ausente (campo obrigatÃ³rio)

----------------------------------------------------------------------------

serializer = AccountSerializer(data=account_dict)
serializer.is_valid()
Tenta validar os dados â€”
Retorna: False (invÃ¡lido)

-------------------------------------------------------------------------

serializer.errors
Mostra os erros encontrados:

'name': ['This field is required.'] â†’ campo obrigatÃ³rio ausente

'email': ['Enter a valid email address.'] â†’ formato invÃ¡lido

'age': ['A valid integer is required.'] â†’ valor booleano nÃ£o aceito

---------------------------------------------------------------------

serializer.validated_data
NÃ£o retorna nada, pois os dados nÃ£o foram validados com sucesso.

-----------------------------------------------------------------------




ðŸ“· Imagem 2 - InserÃ§Ã£o de dados vÃ¡lidos com DRF Serializer
from accounts.serializers import AccountSerializer
from accounts.models import Account
 
ImportaÃ§Ã£o do serializer e do model Account.
----------------------------------------------------------------------------------------------------------------------------------------------------
account_dict = {
    "name": "Angela",
    "email": "angela@gmail.com",
    "age": 22,
    "sex": "feminino",
    "extra_key": "extra_value"
}
CriaÃ§Ã£o de um dicionÃ¡rio com dados da conta. Note que extra_key nÃ£o faz parte do serializer/model â€” ele serÃ¡ ignorado.
----------------------------------------------------------------------------------------------------------------------------------------------------

serializer = AccountSerializer(data=account_dict)
CriaÃ§Ã£o do serializer, passando os dados como argumento.

----------------------------------------------------------------------------------------------------------------------------------------------------

serializer.validated_data
Mostra os dados validados (sem extra_key, pois ela foi ignorada).
Retorna: {'name': 'Angela', 'email': 'angela@gmail.com', 'age': 22, 'sex': 'feminino'}

----------------------------------------------------------------------------------------------------------------------------------------------------

serializer.data
RepresentaÃ§Ã£o dos dados do serializer â€” igual ao validated_data.

----------------------------------------------------------------------------------------------------------------------------------------------------

Account.objects.create(**serializer.validated_data)
CriaÃ§Ã£o de um objeto no banco de dados usando os dados validados.

----------------------------------------------------------------------------------------------------------------------------------------------------

Account.objects.create(**serializer.data)
TambÃ©m cria o objeto, mas nÃ£o Ã© a forma recomendada. Melhor usar validated_data para garantir que os dados passaram pela validaÃ§Ã£o.

--------------------------------------------------------------------------------------------------------------------------


>>> from accounts.serializers import AccountSerializer
>>> from accounts.models import Account
>>> account_obj = Account.objects.get(id=1)
>>> account_obj
<Account: Account object (1)>
>>> serializer = AccountSerializer(account_obj)
>>> serializer.data
{'name': 'Angela', 'email': 'angela@gmail.com', 'age': 22, 'sex': 'feminino'}